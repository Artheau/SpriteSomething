# workflow name
name: Test, Build, Deploy Release, Deploy Pages

# fire on
on: [push, pull_request]

########################
# Non-GitHub providers #
########################
# *: mad9000/actions-find-and-replace-string@1

# What I *should* be able to do:
#  Define Install Job
#   Checkout commit
#   Halt if fail
#  Define Tests Job
#   Calls Install Job
#   Run tests
#   Halt if fail
#  Define Build Job
#   Calls Install Job
#   Run build.py
#   Halt if fail
#  Define Prepare-Release Job
#   Calls Install Job
#   Prepare workspace for release files
#   Halt if fail
#  Define Deploy Release Job
#   Calls Prepare Release Job
#   Deploys release files
#   Halt if fail
#  Define Prepare-Pages Job
#   Calls Install Job
#   Calls Prepare Release Job
#   Prepare workspace for releasing pages files
#   Halt if fail
#  Define Deploy Pages Job
#   Calls Install Job
#   Deploys pages files
#   Halt if fail

# stuff to do
jobs:
  # Install & Test
  #  Set up environment
  # Test
  #  Run python -m unittest
  install-test:
    name: Install/Test
    # cycle through os list
    runs-on: ${{ matrix.os-name }}
    # VM settings
    #  os & python versions
    strategy:
      matrix:
        os-name: [ubuntu-latest, ubuntu-18.04, macOS-latest, windows-latest]
        python-version: [
          3.8,
          # 3.9,
          "3.10"
        ]
        pillow-version: [
          "6.2.2",
          # "7.0.0",
          # "7.1.2",
          # "7.2.0",
          # "8.0.1",
          # "8.1.2",
          # "8.2.0",
          # "8.3.2",
          # "8.4.0",
          "9.0.1"
        ]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
      # install python
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      # install dependencies via pip
      - name: Install Dependencies via pip
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/install.py
      - name: Install Pillow
        run: |
          python -m pip install pillow==${{ matrix.pillow-version }}
      # start virtual display driver & run tests
      - name: Start virtual display driver & Test (!Windows)
        env:
          DISPLAY: :99
        run: |
          disp=:99
          screen=0
          geom=640x480x24
          exec Xvfb $disp -screen $screen $geom 2>/tmp/Xvfb.log &
          export DISPLAY=:99
          python -m ./tests/new/custom-tests.py
        if: contains(matrix.os-name, 'windows') != true
      - name: Start virtual display driver & Test (Windows)
        uses: GabrielBB/xvfb-action@v1.4
        with:
          # run: python -m unittest
          run: python -m ./tests/new/custom-tests.py
        if: contains(matrix.os-name, 'windows')
  # Install & Build
  #  Set up environment
  # Build
  #  Run build.py
  install-build:
    name: Install/Build
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
#        os-name: [ubuntu-latest, ubuntu-18.04, macOS-latest, windows-latest]
        os-name: [ubuntu-latest, ubuntu-18.04, windows-latest]
        python-version: [3.8]
    needs: [install-test]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
      # get parent directory
      - name: Get Repo Name
        uses: mad9000/actions-find-and-replace-string@1
        id: repoName
        with:
          source: ${{ github.repository }}
          find: '${{ github.repository_owner }}/'
          replace: ''
      - name: Get Parent Directory Path (!Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDirNotWin
        with:
          source: ${{ github.workspace }}
          find: '${{ steps.repoName.outputs.value }}/${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      - name: Get Parent Directory Path (Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDir
        with:
          source: ${{ steps.parentDirNotWin.outputs.value }}
          find: '${{ steps.repoName.outputs.value }}\${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      # install python
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"
      - run: |
          python --version
      # install dependencies via pip
      - name: Install Dependencies via pip
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/install.py
      # try to get UPX
      - name: Get UPX
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/get_upx.py
      # run build.py
      - name: Build Binary
        run: |
          pip install pyinstaller
          python -m source.meta.build
      # prepare binary artifact for later step
      - name: Prepare Binary Artifact
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/prepare_binary.py
      # upload binary artifact for later step
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v2
        with:
          name: binary-${{ matrix.os-name }}
          path: ${{ steps.parentDir.outputs.value }}/artifact

  # Install & Preparing Release
  #  Set up environment
  # Local Prepare Release action
  install-prepare-release:
    name: Install/Prepare Release
    # cycle through os list
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # install/release on not xenial
#        os-name: [ubuntu-latest, ubuntu-18.04, macOS-latest, windows-latest]
        os-name: [ubuntu-latest, ubuntu-18.04, windows-latest]
        python-version: [3.8]

    needs: [install-build]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
      # get parent directory
      - name: Get Repo Name
        uses: mad9000/actions-find-and-replace-string@1
        id: repoName
        with:
          source: ${{ github.repository }}
          find: '${{ github.repository_owner }}/'
          replace: ''
      - name: Get Parent Directory Path (!Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDirNotWin
        with:
          source: ${{ github.workspace }}
          find: '${{ steps.repoName.outputs.value }}/${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      - name: Get Parent Directory Path (Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDir
        with:
          source: ${{ steps.parentDirNotWin.outputs.value }}
          find: '${{ steps.repoName.outputs.value }}\${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      # install python
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: "x64"
      - run: |
          python --version
      # install dependencies via pip
      - name: Install Dependencies via pip
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/install.py
      # download binary artifact
      - name: Download Binary Artifact
        uses: actions/download-artifact@v2
        with:
          name: binary-${{ matrix.os-name }}
          path: ./
      # Prepare AppVersion & Release
      - name: Prepare AppVersion & Release
        env:
          OS_NAME: ${{ matrix.os-name }}
        run: |
          python ./resources/ci/common/prepare_appversion.py
          python ./resources/ci/common/prepare_release.py
      # upload appversion artifact for later step
      - name: Upload AppVersion Artifact
        uses: actions/upload-artifact@v2
        with:
          name: appversion-${{ matrix.os-name }}
          path: ./resources/app/meta/manifests/app_version.txt
      # upload archive artifact for later step
      - name: Upload Archive Artifact
        uses: actions/upload-artifact@v2
        with:
          name: archive-${{ matrix.os-name }}
          path: ${{ steps.parentDir.outputs.value }}/deploy

  # Deploy to GitHub Releases
  #  Release Name:  SpriteSomething v${GITHUB_TAG}
  #  Release Body:  Inline content of RELEASENOTES.md
  #  Release Body:  Fallback to URL to RELEASENOTES.md
  #  Release Files: ../deploy
  deploy-release:
    name: Deploy GHReleases
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # release only on focal/bionic
        os-name: [ubuntu-latest]
        python-version: [3.8]

    needs: [install-prepare-release]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
      - name: Install Dependencies via pip
        run: |
          python -m pip install pytz requests
      # get parent directory
      - name: Get Repo Name
        uses: mad9000/actions-find-and-replace-string@1
        id: repoName
        with:
          source: ${{ github.repository }}
          find: '${{ github.repository_owner }}/'
          replace: ''
      - name: Get Parent Directory Path (!Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDirNotWin
        with:
          source: ${{ github.workspace }}
          find: '${{ steps.repoName.outputs.value }}/${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      - name: Get Parent Directory Path (Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDir
        with:
          source: ${{ steps.parentDirNotWin.outputs.value }}
          find: '${{ steps.repoName.outputs.value }}\${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      # download appversion artifact
      - name: Download AppVersion Artifact
        uses: actions/download-artifact@v2
        with:
          name: appversion-${{ matrix.os-name }}
          path: ${{ steps.parentDir.outputs.value }}/build
      # download ubuntu archive artifact
      - name: Download Ubuntu Archive Artifact
        uses: actions/download-artifact@v2
        with:
          name: archive-ubuntu-latest
          path: ${{ steps.parentDir.outputs.value }}/deploy/linux
      # download macos archive artifact
      # - name: Download MacOS Archive Artifact
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: archive-macOS-latest
      #     path: ${{ steps.parentDir.outputs.value }}/deploy/macos
      # download windows archive artifact
      - name: Download Windows Archive Artifact
        uses: actions/download-artifact@v2
        with:
          name: archive-windows-latest
          path: ${{ steps.parentDir.outputs.value }}/deploy/windows
      # debug info
      - name: Debug Info
        id: debug_info
        #      shell: bash
        #        git tag ${GITHUB_TAG}
        #        git push origin ${GITHUB_TAG}
        run: |
          GITHUB_TAG="$(head -n 1 ../build/app_version.txt)"
          echo "::set-output name=github_tag::$GITHUB_TAG"
          GITHUB_TAG="v${GITHUB_TAG}"
          RELEASE_NAME="SpriteSomething ${GITHUB_TAG}"
          echo "Release Name: ${RELEASE_NAME}"
          echo "Git Tag:      ${GITHUB_TAG}"
      # create a release
      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.debug_info.outputs.github_tag }}
          release_name: SpriteSomething v${{ steps.debug_info.outputs.github_tag }}
          body_path: RELEASENOTES.md
          # draft: true
        if: contains(github.ref, 'master')
      # upload linux archive asset
      - name: Upload Linux Archive Asset
        id: upload-linux-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../deploy/linux/SpriteSomething.tar.gz
          asset_name: SpriteSomething-${{ steps.debug_info.outputs.github_tag }}-linux-focal.tar.gz
          asset_content_type: application/gzip
        if: contains(github.ref, 'master')
      # upload macos archive asset
      # - name: Upload MacOS Archive Asset
      #   id: upload-macos-asset
      #   uses: actions/upload-release-asset@v1.0.2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ../deploy/macos/SpriteSomething.tar.gz
      #     asset_name: SpriteSomething-${{ steps.debug_info.outputs.github_tag }}-osx.tar.gz
      #     asset_content_type: application/gzip
      #   if: contains(github.ref, 'master')
      # upload windows archive asset
      - name: Upload Windows Archive Asset
        id: upload-windows-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ../deploy/windows/SpriteSomething.zip
          asset_name: SpriteSomething-${{ steps.debug_info.outputs.github_tag }}-windows.zip
          asset_content_type: application/zip
        if: contains(github.ref, 'master')

      - name: Build Discord Notification Payload
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          # DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_UPDATES }}
        run: |
          python ./resources/ci/common/prepare_discord_notif.py

  # Prepare for Deployment to GitHub Pages
  #  run custom action
  prepare-pages:
    name: Prepare GHPages
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # pages on one OS
        os-name: [ubuntu-latest]

    needs: [deploy-release]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
      # get parent directory
      - name: Get Repo Name
        uses: mad9000/actions-find-and-replace-string@1
        id: repoName
        with:
          source: ${{ github.repository }}
          find: '${{ github.repository_owner }}/'
          replace: ''
      - name: Get Parent Directory Path (!Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDirNotWin
        with:
          source: ${{ github.workspace }}
          find: '${{ steps.repoName.outputs.value }}/${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      - name: Get Parent Directory Path (Windows)
        uses: mad9000/actions-find-and-replace-string@1
        id: parentDir
        with:
          source: ${{ steps.parentDirNotWin.outputs.value }}
          find: '${{ steps.repoName.outputs.value }}\${{ steps.repoName.outputs.value }}'
          replace: ${{ steps.repoName.outputs.value }}
      # download appversion artifact
      - name: Download AppVersion Artifact
        uses: actions/download-artifact@v2
        with:
          name: appversion-${{ matrix.os-name }}
          path: ${{ steps.parentDir.outputs.value }}/build
      # Prepare Pages
      - name: Prepare GitHub Pages
        run: |
          python ./resources/ci/common/prepare_pages.py
      # upload pages artifact for later step
      - name: Upload Pages Artifact
        uses: actions/upload-artifact@v2
        with:
          name: pages-${{ matrix.os-name }}
          path: ${{ steps.parentDir.outputs.value }}/pages

  # Deploy to GitHub Pages
  #
  deploy-pages:
    name: Deploy GHPages
    runs-on: ${{ matrix.os-name }}

    # VM settings
    #  os & python versions
    strategy:
      matrix:
        # pages on one OS
        os-name: [ubuntu-latest]

    needs: [prepare-pages]
    steps:
      # checkout commit
      - name: Checkout commit
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      # download pages artifact
      - name: Download Pages Artifact
        uses: actions/download-artifact@v2
        with:
          name: pages-${{ matrix.os-name }}
          path: ./
      # Prepare for GH-Pages
      - name: Prepare for GH-Pages
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
      # List Differences
      - name: List Differences
        run: |
          git diff --name-status --cached
      # Set Commit
      - name: Set Commit
        run: |
          git commit -q -F commit.txt
          git log
      # Push to GH-Pages
      - name: Push to GH-Pages (MASTER)
        run: |
          git push
        if: contains(github.ref, 'master')
