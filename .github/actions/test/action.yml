name: ⏱️Test
description: Test app
inputs:
  os-name:
    required: true
    description: OS to run on
  python-version:
    required: true
    description: Python version to install
  pillow-version:
    required: true
    description: Pillow version to install

#########
# actions
#########
# actions/checkout@v4.2.0
# actions/download-artifact@v4.1.8
# actions/upload-artifact@v4.4.0
# coactions/setup-xvfb@90473c3ebc69533a1a6e0505c36511b69c8c3135

runs:
  using: "composite"
  steps:
    # download pipline
    # - name: 🔽Download PipLine
    #   shell: bash
    #   run: |
    #     echo "🔽Download PipLine"
    # - name: 🔽Download PipLine
    #   uses: actions/download-artifact@v4.1.8
    #   with:
    #     name: pipline-test-${{ inputs.os-name }}-py${{ inputs.python-version }}-pil${{ inputs.pillow-version }}
    #     path: ./resources/user/meta/manifests

    # start virtual display driver & run tests
    - name: 🖥️⏱️Start virtual display driver & Test (!Windows)
      shell: bash
      run: |
        echo "🖥️⏱️Start virtual display driver & Test (!Windows)"
      if: contains(inputs.os-name, 'windows') != true
    - name: 🖥️⏱️Start virtual display driver & Test (!Windows)
      shell: bash
      env:
        DISPLAY: :99
      run: |
        disp=:99
        screen=0
        geom=640x480x24
        exec Xvfb $disp -screen $screen $geom 2>/tmp/Xvfb.log &
        export DISPLAY=:99
        mkdir -p ./failures
        echo "" > ./failures/errors.txt
        python -m tests.new.asserts.test_diags
        python -m tests.new.asserts.test_cli
        python -m tests.new.asserts.test_exports
        python -m tests.new.asserts.test_animations
        python -m tests.new.asserts.test_gui
        python -m tests.new.asserts.test_spiffybuttons
        python -m tests.new.asserts.test_lz2_decomp
        python -m tests.new.asserts.test_lz2_comp
      if: contains(inputs.os-name, 'windows') != true

    - name: 🖥️⏱️Start virtual display driver & Test (Windows)
      shell: bash
      run: |
        echo "🖥️⏱️Start virtual display driver & Test (Windows)"
      if: contains(inputs.os-name, 'windows')
    - name: 🖥️⏱️Start virtual display driver & Test (Windows)
      uses: coactions/setup-xvfb@90473c3ebc69533a1a6e0505c36511b69c8c3135
      with:
        run: |
          mkdir -p ./failures
          echo "" > ./failures/errors.txt
          python -m tests.new.asserts.test_diags
          python -m tests.new.asserts.test_cli
          python -m tests.new.asserts.test_exports
          python -m tests.new.asserts.test_animations
          python -m tests.new.asserts.test_gui
          python -m tests.new.asserts.test_spiffybuttons
          python -m tests.new.asserts.test_lz2_decomp
          python -m tests.new.asserts.test_lz2_comp
      if: contains(inputs.os-name, 'windows')

    # print failures
    - name: 💬Print Failures
      if: failure()
      shell: bash
      run: |
        echo "💬Print Failures"
    - name: Print Failures
      if: failure()
      shell: bash
      run: |
        ERR_STRING="$(cat ./failures/errors.txt)"
        ERR_STRING="${ERR_STRING//'%'/'%25'}"
        ERR_STRING="${ERR_STRING//$'\n'/' | '}"
        ERR_STRING="${ERR_STRING//$'\r'/' | '}"
        ERR_STRING="${ERR_STRING//$'\n'/'%0A'}"
        ERR_STRING="${ERR_STRING//$'\r'/'%0D'}"
        echo "::error ::$ERR_STRING"

    # upload failures
    - name: 🔼Upload Failures
      if: failure()
      shell: bash
      run: |
        echo "🔼Upload Failures"
    - name: 🔼Upload Failures
      if: failure()
      uses: actions/upload-artifact@v4.4.0
      with:
        name: failures-${{ inputs.os-name }}-py${{ inputs.python-version }}-pil${{ inputs.pillow-version }}
        path: ./failures
